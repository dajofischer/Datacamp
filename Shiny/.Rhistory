sliderInput(inputId = "size",
label = "Size:",
min = 0, max = 5,
value = 2)
),
# Output:
mainPanel(
plotOutput(outputId = "scatterplot")
)
)
)
# Define server function required to create the scatterplot-
server <- function(input, output, session) {
# New plot title
new_plot_title <- eventReactive(
eventExpr = {input$update_plot_title=TRUE },
valueExpr = toTitleCase(input$plot_title)
)
# Create scatterplot object the plotOutput function is expecting
output$scatterplot <- renderPlot({
ggplot(data = movies, aes_string(x = input$x, y = input$y, color = input$z)) +
geom_point(alpha = input$alpha, size = input$size) +
labs(title = new_plot_title())
})
}
# Create a Shiny app object
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(tools)
load(url("http://s3.amazonaws.com/assets.datacamp.com/production/course_4850/datasets/movies.Rdata"))
# UI
ui <- fluidPage(
sidebarLayout(
# Input
sidebarPanel(
# Enter text for plot title
textInput(inputId = "plot_title",
label = "Plot title",
placeholder = "Enter text to be used as plot title"),
# Action button for plot title
actionButton(inputId = "update_plot_title",
label = "Update plot title"),
# Visual separation
hr(),
# Select variable for y-axis
selectInput(inputId = "y",
label = "Y-axis:",
choices = c("IMDB rating" = "imdb_rating",
"IMDB number of votes" = "imdb_num_votes",
"Critics Score" = "critics_score",
"Audience Score" = "audience_score",
"Runtime" = "runtime"),
selected = "audience_score"),
# Select variable for x-axis
selectInput(inputId = "x",
label = "X-axis:",
choices = c("IMDB rating" = "imdb_rating",
"IMDB number of votes" = "imdb_num_votes",
"Critics Score" = "critics_score",
"Audience Score" = "audience_score",
"Runtime" = "runtime"),
selected = "critics_score"),
# Select variable for color
selectInput(inputId = "z",
label = "Color by:",
choices = c("Title Type" = "title_type",
"Genre" = "genre",
"MPAA Rating" = "mpaa_rating",
"Critics Rating" = "critics_rating",
"Audience Rating" = "audience_rating"),
selected = "mpaa_rating"),
# Set alpha level
sliderInput(inputId = "alpha",
label = "Alpha:",
min = 0, max = 1,
value = 0.5),
# Set point size
sliderInput(inputId = "size",
label = "Size:",
min = 0, max = 5,
value = 2)
),
# Output:
mainPanel(
plotOutput(outputId = "scatterplot")
)
)
)
# Define server function required to create the scatterplot-
server <- function(input, output, session) {
# New plot title
new_plot_title <- eventReactive(
eventExpr = toTitleCase(input$plot_title),
valueExpr = {input$update_plot_title=TRUE }
)
# Create scatterplot object the plotOutput function is expecting
output$scatterplot <- renderPlot({
ggplot(data = movies, aes_string(x = input$x, y = input$y, color = input$z)) +
geom_point(alpha = input$alpha, size = input$size) +
labs(title = new_plot_title())
})
}
# Create a Shiny app object
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(tools)
load(url("http://s3.amazonaws.com/assets.datacamp.com/production/course_4850/datasets/movies.Rdata"))
# UI
ui <- fluidPage(
sidebarLayout(
# Input
sidebarPanel(
# Enter text for plot title
textInput(inputId = "plot_title",
label = "Plot title",
placeholder = "Enter text to be used as plot title"),
# Action button for plot title
actionButton(inputId = "update_plot_title",
label = "Update plot title"),
# Visual separation
hr(),
# Select variable for y-axis
selectInput(inputId = "y",
label = "Y-axis:",
choices = c("IMDB rating" = "imdb_rating",
"IMDB number of votes" = "imdb_num_votes",
"Critics Score" = "critics_score",
"Audience Score" = "audience_score",
"Runtime" = "runtime"),
selected = "audience_score"),
# Select variable for x-axis
selectInput(inputId = "x",
label = "X-axis:",
choices = c("IMDB rating" = "imdb_rating",
"IMDB number of votes" = "imdb_num_votes",
"Critics Score" = "critics_score",
"Audience Score" = "audience_score",
"Runtime" = "runtime"),
selected = "critics_score"),
# Select variable for color
selectInput(inputId = "z",
label = "Color by:",
choices = c("Title Type" = "title_type",
"Genre" = "genre",
"MPAA Rating" = "mpaa_rating",
"Critics Rating" = "critics_rating",
"Audience Rating" = "audience_rating"),
selected = "mpaa_rating"),
# Set alpha level
sliderInput(inputId = "alpha",
label = "Alpha:",
min = 0, max = 1,
value = 0.5),
# Set point size
sliderInput(inputId = "size",
label = "Size:",
min = 0, max = 5,
value = 2)
),
# Output:
mainPanel(
plotOutput(outputId = "scatterplot")
)
)
)
# Define server function required to create the scatterplot-
server <- function(input, output, session) {
# New plot title
new_plot_title <- eventReactive(
req(input$plot_title),
eventExpr = toTitleCase(input$plot_title),
valueExpr = {input$update_plot_title=TRUE }
)
# Create scatterplot object the plotOutput function is expecting
output$scatterplot <- renderPlot({
ggplot(data = movies, aes_string(x = input$x, y = input$y, color = input$z)) +
geom_point(alpha = input$alpha, size = input$size) +
labs(title = new_plot_title())
})
}
# Create a Shiny app object
shinyApp(ui = ui, server = server)
?eventReactive
library(shiny)
library(ggplot2)
library(tools)
load(url("http://s3.amazonaws.com/assets.datacamp.com/production/course_4850/datasets/movies.Rdata"))
# UI
ui <- fluidPage(
sidebarLayout(
# Input
sidebarPanel(
# Enter text for plot title
textInput(inputId = "plot_title",
label = "Plot title",
placeholder = "Enter text to be used as plot title"),
# Action button for plot title
actionButton(inputId = "update_plot_title",
label = "Update plot title"),
# Visual separation
hr(),
# Select variable for y-axis
selectInput(inputId = "y",
label = "Y-axis:",
choices = c("IMDB rating" = "imdb_rating",
"IMDB number of votes" = "imdb_num_votes",
"Critics Score" = "critics_score",
"Audience Score" = "audience_score",
"Runtime" = "runtime"),
selected = "audience_score"),
# Select variable for x-axis
selectInput(inputId = "x",
label = "X-axis:",
choices = c("IMDB rating" = "imdb_rating",
"IMDB number of votes" = "imdb_num_votes",
"Critics Score" = "critics_score",
"Audience Score" = "audience_score",
"Runtime" = "runtime"),
selected = "critics_score"),
# Select variable for color
selectInput(inputId = "z",
label = "Color by:",
choices = c("Title Type" = "title_type",
"Genre" = "genre",
"MPAA Rating" = "mpaa_rating",
"Critics Rating" = "critics_rating",
"Audience Rating" = "audience_rating"),
selected = "mpaa_rating"),
# Set alpha level
sliderInput(inputId = "alpha",
label = "Alpha:",
min = 0, max = 1,
value = 0.5),
# Set point size
sliderInput(inputId = "size",
label = "Size:",
min = 0, max = 5,
value = 2)
),
# Output:
mainPanel(
plotOutput(outputId = "scatterplot")
)
)
)
# Define server function required to create the scatterplot-
server <- function(input, output, session) {
# New plot title
new_plot_title <- eventReactive(input$plot_title,
{eventExpr = toTitleCase(input$plot_title),
valueExpr = input$update_plot_title=TRUE }
)
# Create scatterplot object the plotOutput function is expecting
output$scatterplot <- renderPlot({
ggplot(data = movies, aes_string(x = input$x, y = input$y, color = input$z)) +
geom_point(alpha = input$alpha, size = input$size) +
labs(title = new_plot_title())
})
}
# Create a Shiny app object
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(tools)
load(url("http://s3.amazonaws.com/assets.datacamp.com/production/course_4850/datasets/movies.Rdata"))
# UI
ui <- fluidPage(
sidebarLayout(
# Input
sidebarPanel(
# Enter text for plot title
textInput(inputId = "plot_title",
label = "Plot title",
placeholder = "Enter text to be used as plot title"),
# Action button for plot title
actionButton(inputId = "update_plot_title",
label = "Update plot title"),
# Visual separation
hr(),
# Select variable for y-axis
selectInput(inputId = "y",
label = "Y-axis:",
choices = c("IMDB rating" = "imdb_rating",
"IMDB number of votes" = "imdb_num_votes",
"Critics Score" = "critics_score",
"Audience Score" = "audience_score",
"Runtime" = "runtime"),
selected = "audience_score"),
# Select variable for x-axis
selectInput(inputId = "x",
label = "X-axis:",
choices = c("IMDB rating" = "imdb_rating",
"IMDB number of votes" = "imdb_num_votes",
"Critics Score" = "critics_score",
"Audience Score" = "audience_score",
"Runtime" = "runtime"),
selected = "critics_score"),
# Select variable for color
selectInput(inputId = "z",
label = "Color by:",
choices = c("Title Type" = "title_type",
"Genre" = "genre",
"MPAA Rating" = "mpaa_rating",
"Critics Rating" = "critics_rating",
"Audience Rating" = "audience_rating"),
selected = "mpaa_rating"),
# Set alpha level
sliderInput(inputId = "alpha",
label = "Alpha:",
min = 0, max = 1,
value = 0.5),
# Set point size
sliderInput(inputId = "size",
label = "Size:",
min = 0, max = 5,
value = 2)
),
# Output:
mainPanel(
plotOutput(outputId = "scatterplot")
)
)
)
# Define server function required to create the scatterplot-
server <- function(input, output, session) {
# New plot title
new_plot_title <- eventReactive(eventExpr = toTitleCase(input$plot_title),
valueExpr = input$update_plot_title=TRUE
)
# Create scatterplot object the plotOutput function is expecting
output$scatterplot <- renderPlot({
ggplot(data = movies, aes_string(x = input$x, y = input$y, color = input$z)) +
geom_point(alpha = input$alpha, size = input$size) +
labs(title = new_plot_title())
})
}
# Create a Shiny app object
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(tools)
load(url("http://s3.amazonaws.com/assets.datacamp.com/production/course_4850/datasets/movies.Rdata"))
# UI
ui <- fluidPage(
sidebarLayout(
# Input
sidebarPanel(
# Enter text for plot title
textInput(inputId = "plot_title",
label = "Plot title",
placeholder = "Enter text to be used as plot title"),
# Action button for plot title
actionButton(inputId = "update_plot_title",
label = "Update plot title"),
# Visual separation
hr(),
# Select variable for y-axis
selectInput(inputId = "y",
label = "Y-axis:",
choices = c("IMDB rating" = "imdb_rating",
"IMDB number of votes" = "imdb_num_votes",
"Critics Score" = "critics_score",
"Audience Score" = "audience_score",
"Runtime" = "runtime"),
selected = "audience_score"),
# Select variable for x-axis
selectInput(inputId = "x",
label = "X-axis:",
choices = c("IMDB rating" = "imdb_rating",
"IMDB number of votes" = "imdb_num_votes",
"Critics Score" = "critics_score",
"Audience Score" = "audience_score",
"Runtime" = "runtime"),
selected = "critics_score"),
# Select variable for color
selectInput(inputId = "z",
label = "Color by:",
choices = c("Title Type" = "title_type",
"Genre" = "genre",
"MPAA Rating" = "mpaa_rating",
"Critics Rating" = "critics_rating",
"Audience Rating" = "audience_rating"),
selected = "mpaa_rating"),
# Set alpha level
sliderInput(inputId = "alpha",
label = "Alpha:",
min = 0, max = 1,
value = 0.5),
# Set point size
sliderInput(inputId = "size",
label = "Size:",
min = 0, max = 5,
value = 2)
),
# Output:
mainPanel(
plotOutput(outputId = "scatterplot")
)
)
)
# Define server function required to create the scatterplot-
server <- function(input, output, session) {
# New plot title
new_plot_title <- eventReactive(
eventExpr = input$update_plot_title,
valueExpr = { toTitleCase(input$plot_title) },
ignoreNULL = FALSE
)
# Create scatterplot object the plotOutput function is expecting
output$scatterplot <- renderPlot({
ggplot(data = movies, aes_string(x = input$x, y = input$y, color = input$z)) +
geom_point(alpha = input$alpha, size = input$size) +
labs(title = new_plot_title())
})
}
# Create a Shiny app object
shinyApp(ui = ui, server = server)
library(shiny)
load(url("http://s3.amazonaws.com/assets.datacamp.com/production/course_4850/datasets/movies.Rdata"))
# UI
ui <- fluidPage(
sidebarLayout(
# Input
sidebarPanel(
# Numeric input for number of rows to show
numericInput(inputId = "n_rows",
label = "How many rows do you want to see?",
value = 10),
# Action button to show
actionButton(inputId = "button",
label = "Show")
),
# Output:
mainPanel(
tableOutput(outputId = "datatable")
)
)
)
# Define server function required to create the scatterplot-
server <- function(input, output, session) {
# Print a message to the console every time button is pressed
observeEvent(input$button, {
cat("Showing", input$n_rows, "rows\n")
})
# Take a reactive dependency on input$button, but not on any other inputs
df <- renderTable(input$button, {
head(movies, input$n_rows)
})
output$ <- ___({
df()
})
}
# Create a Shiny app object
shinyApp(ui = ui, server = server)
?tableOutput
?eventExpr
library(shiny)
load(url("http://s3.amazonaws.com/assets.datacamp.com/production/course_4850/datasets/movies.Rdata"))
# UI
ui <- fluidPage(
sidebarLayout(
# Input
sidebarPanel(
# Numeric input for number of rows to show
numericInput(inputId = "n_rows",
label = "How many rows do you want to see?",
value = 10),
# Action button to show
actionButton(inputId = "button",
label = "Show")
),
# Output:
mainPanel(
tableOutput(outputId = "datatable")
)
)
)
# Define server function required to create the scatterplot-
server <- function(input, output, session) {
# Print a message to the console every time button is pressed
observeEvent(input$button, {
cat("Showing", input$n_rows, "rows\n")
})
# Take a reactive dependency on input$button,
# but not on any of the stuff inside the function
df <- eventReactive(input$button, {
head(movies, input$n_rows)
})
output$datatable <- renderTable({
df()
})
}
# Create a Shiny app object
shinyApp(ui = ui, server = server)
library(shiny)
add_2 <- function(x) { x + 2 }
ui <- fluidPage(
titlePanel("Add 2"),
sidebarLayout(
sidebarPanel( sliderInput("x", "Select x", min = 1, max = 50, value = 30) ),
mainPanel( textOutput("x_updated") )
)
)
server <- function(input, output) {
# Add 2 to input$x, save as a reactive expression
current_x        <- reactive({ add_2(input$x) })
# Render the current result of input$x + 2
output$x_updated <- renderText({ current_x() })
}
shinyApp(ui, server)
